/****************************************************************************
**
** GENERATED BY SOHAG DEVELOPER FOR POSTGRESQL
** Visit Us: http://sohag-developer.com/
**
****************************************************************************/

#include "employees.h"
#include "ui_employees.h"
#include <QSqlQuery>
#include <QSqlError>

Employees::Employees(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Employees)
{
    ui->setupUi(this);
}

Employees::~Employees()
{
    delete ui;
}


void Employees::clear()
{
	ui->employee_id->clear();
	ui->employee_name->clear();
	ui->gender->clear();
	ui->birth_date->clear();
	
}

QVariant Employees::toVarinat(QString string)
{
    if (string.isEmpty()){
        return QVariant();
    }
    return QVariant(string);
}

QString Employees::toString(QVariant value)
{
	int valueType=value.type();
    if(value.isNull()){
        return QString();
    }else if(valueType==QMetaType::Int){
        return QString::number(value.toInt());
    }else if(valueType==QMetaType::UInt){
        return QString::number(value.toUInt());
    }else if(valueType==QMetaType::Double){
        return QString::number(value.toDouble());
    }else if(valueType==QMetaType::Long){
        return QString::number(value.toLongLong());
    }else if(valueType==QMetaType::LongLong){
        return QString::number(value.toLongLong());
    }else if(valueType==QMetaType::Short){
        return QString::number(value.toInt());
    }else if(valueType==QMetaType::ULong){
        return QString::number(value.toULongLong());
    }else if(valueType==QMetaType::ULongLong){
        return QString::number(value.toULongLong());
    }else if(valueType==QMetaType::UShort){
        return QString::number(value.toUInt());
    }else if(valueType==QMetaType::Float){
        return QString::number(value.toFloat());
    }
    return value.toString();
}

bool Employees::insert()
{
    QSqlQuery query;
    query.prepare("insert into public.employees(employee_id,employee_name,gender,birth_date) values (?,?,?,?)");
	query.addBindValue(toVarinat(ui->employee_id->text()));
	query.addBindValue(toVarinat(ui->employee_name->text()));
	query.addBindValue(toVarinat(ui->gender->text()));
	query.addBindValue(toVarinat(ui->birth_date->text()));


    query.exec();
    if(query.lastError().isValid()){

        return false;
    }
    return true;
}


bool Employees::update()
{
    QSqlQuery query;
    query.prepare("UPDATE public.employees SET employee_id=?,employee_name=?,gender=?,birth_date=? WHERE employee_id=?");
	query.addBindValue(toVarinat(ui->employee_id->text()));
	query.addBindValue(toVarinat(ui->employee_name->text()));
	query.addBindValue(toVarinat(ui->gender->text()));
	query.addBindValue(toVarinat(ui->birth_date->text()));


	query.addBindValue(ui->employee_id->text());


    query.exec();
    if(query.lastError().isValid()){

        return false;
    }
    return true;
}




bool Employees::remove()
{
    QSqlQuery query;
    query.prepare("delete from public.employees WHERE employee_id=?");

	query.addBindValue(ui->employee_id->text());


    query.exec();
    if(query.lastError().isValid()){

        return false;
    }
    return true;
}


bool Employees::query()
{
    QSqlQuery query;
    query.prepare("select employee_id,employee_name,gender,birth_date from public.employees WHERE employee_id=?");

	query.addBindValue(ui->employee_id->text());


    query.exec();
    if(query.lastError().isValid()){

        return false;
    }
    query.first();
	ui->employee_id->setText(toString(query.value(0)));
	ui->employee_name->setText(toString(query.value(1)));
	ui->gender->setText(toString(query.value(2)));
	ui->birth_date->setText(toString(query.value(3)));
    return true;
}
